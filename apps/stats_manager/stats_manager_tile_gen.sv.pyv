<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
`include "noc_defs.vh"

module stats_manager_tile 
import tcp_pkg::*;
import stats_manager_pkg::*;
import tracker_pkg::*;
#(
     parameter APP_TILE_SRC_X = -1
    ,parameter APP_TILE_SRC_Y = -1
    ,parameter APP_TILE_RX_DST_BUF_X = -1
    ,parameter APP_TILE_RX_DST_BUF_Y = -1
    ,parameter APP_TILE_TX_DST_BUF_X = -1
    ,parameter APP_TILE_TX_DST_BUF_Y = -1
)(
     input clk
    ,input rst

<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="stats_manager_tile",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);

<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router", nocs=tile_config.nocs,
        noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>

    logic                           ctovr_splitter_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ctovr_splitter_data_noc0_data;
    logic                           splitter_ctovr_data_noc0_rdy;

    logic                           merger_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   merger_vrtoc_data_noc0_data;
    logic                           vrtoc_merger_data_noc0_rdy;

    logic                           ctovr_splitter_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  ctovr_splitter_ctrl_noc1_data;
    logic                           splitter_ctovr_ctrl_noc1_rdy;

    logic                           merger_vrtoc_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  merger_vrtoc_ctrl_noc1_data;
    logic                           vrtoc_merger_ctrl_noc1_rdy;
    
    logic                           in_manager_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   in_manager_noc0_data;
    logic                           manager_in_noc0_rdy;

    logic                           in_manager_notif_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  in_manager_notif_noc1_data;
    logic                           manager_in_notif_noc1_rdy;

    logic                           manager_out_notif_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  manager_out_notif_noc1_data;
    logic                           notif_manager_out_noc1_rdy;

    logic                           rd_buf_out_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  rd_buf_out_noc1_data;
    logic                           out_rd_buf_noc1_rdy;

    logic                           in_rd_buf_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   in_rd_buf_noc0_data;
    logic                           rd_buf_in_noc0_rdy;

    logic                           wr_buf_out_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   wr_buf_out_noc0_data;
    logic                           out_wr_buf_noc0_rdy;

    logic                           in_wr_buf_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  in_wr_buf_noc1_data;
    logic                           wr_buf_in_noc1_rdy;

    logic                           in_request_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  in_request_noc1_data;
    logic                           request_in_noc1_rdy;

    logic                           request_out_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  request_out_noc1_data;
    logic                           out_request_noc1_rdy;
    
    noc_router_block #(
         .SRC_X (APP_TILE_SRC_X )
        ,.SRC_Y (APP_TILE_SRC_Y )
    ) manager_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="stats_manager_tile", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) tile_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_data_noc0_data )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val  )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy)

        //val/rdy interface
        ,.ctovr_dst_data    (ctovr_splitter_data_noc0_data  )
        ,.ctovr_dst_val     (ctovr_splitter_data_noc0_val   )
        ,.dst_ctovr_rdy     (splitter_ctovr_data_noc0_rdy   )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) tile_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (merger_vrtoc_data_noc0_data    )
        ,.src_vrtoc_val     (merger_vrtoc_data_noc0_val     )
        ,.vrtoc_src_rdy     (vrtoc_merger_data_noc0_rdy     )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );

    assign merger_vrtoc_data_noc0_val = wr_buf_out_noc0_val;
    assign merger_vrtoc_data_noc0_data = wr_buf_out_noc0_data;
    assign out_wr_buf_noc0_rdy = vrtoc_merger_data_noc0_rdy;
    
    
    // split NoC traffic for:
    // - receiving flow notifications
    // - receiving read responses
    beehive_noc_fbits_splitter #(
         .NOC_DATA_W        (`NOC_DATA_WIDTH    )
        ,.MSG_PAYLOAD_LEN   (`PAYLOAD_LEN       )
        ,.MSG_LEN_HI        (`MSG_LENGTH_HI     )
        ,.MSG_LEN_LO        (`MSG_LENGTH_LO     )
        ,.FBITS_HI          (`MSG_DST_FBITS_HI  )
        ,.FBITS_LO          (`MSG_DST_FBITS_LO  )
        ,.num_targets   (3'd2)
        ,.fbits_type0   (APP_NOTIF_IF_FBITS )
        ,.fbits_type1   (RX_IF_FBITS        )
    ) splitter (
         .clk   (clk    )
        ,.rst_n (~rst   )

        ,.src_splitter_vr_noc_val   (ctovr_splitter_data_noc0_val           )
        ,.src_splitter_vr_noc_dat   (ctovr_splitter_data_noc0_data          )
        ,.splitter_src_vr_noc_rdy   (splitter_ctovr_data_noc0_rdy           )

        ,.splitter_dst0_vr_noc_val  (in_manager_noc0_val                    )
        ,.splitter_dst0_vr_noc_dat  (in_manager_noc0_data                   )
        ,.dst0_splitter_vr_noc_rdy  (manager_in_noc0_rdy                    )

        ,.splitter_dst1_vr_noc_val  (in_rd_buf_noc0_val                     )
        ,.splitter_dst1_vr_noc_dat  (in_rd_buf_noc0_data                    )
        ,.dst1_splitter_vr_noc_rdy  (rd_buf_in_noc0_rdy                     )

        ,.splitter_dst2_vr_noc_val  ()
        ,.splitter_dst2_vr_noc_dat  ()
        ,.dst2_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst3_vr_noc_val  ()
        ,.splitter_dst3_vr_noc_dat  ()
        ,.dst3_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst4_vr_noc_val  ()
        ,.splitter_dst4_vr_noc_dat  ()
        ,.dst4_splitter_vr_noc_rdy  (1'b0)
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC_DATA_W   )
    ) tile_noc1_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_ctrl_noc1_data    )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc1_val     )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc1_yummy   )

        //val/rdy interface
        ,.ctovr_dst_data    (ctovr_splitter_ctrl_noc1_data  )
        ,.ctovr_dst_val     (ctovr_splitter_ctrl_noc1_val   )
        ,.dst_ctovr_rdy     (splitter_ctovr_ctrl_noc1_rdy   )
    );
    
    // split NoC traffic for:
    // - receiving buffer notifcations
    // - receiving write confirmations
    // - receiving stats reads
    beehive_noc_fbits_splitter #(
         .NOC_DATA_W        (`CTRL_NOC_DATA_W        )
        ,.MSG_PAYLOAD_LEN   (`PAYLOAD_LEN            )
        ,.MSG_LEN_HI        (`CTRL_MSG_LENGTH_HI     )
        ,.MSG_LEN_LO        (`CTRL_MSG_LENGTH_LO     )
        ,.FBITS_HI          (`CTRL_MSG_DST_FBITS_HI  )
        ,.FBITS_LO          (`CTRL_MSG_DST_FBITS_LO  )
        ,.num_targets   (3'd3)
        ,.fbits_type0   (PTR_IF_FBITS       )
        ,.fbits_type1   (TX_IF_FBITS        )
        ,.fbits_type2   (TRACKER_FBITS      )
    ) splitter_noc1 (
         .clk   (clk    )
        ,.rst_n (~rst   )

        ,.src_splitter_vr_noc_val   (ctovr_splitter_ctrl_noc1_val   )
        ,.src_splitter_vr_noc_dat   (ctovr_splitter_ctrl_noc1_data  )
        ,.splitter_src_vr_noc_rdy   (splitter_ctovr_ctrl_noc1_rdy   )

        ,.splitter_dst0_vr_noc_val  (in_manager_notif_noc1_val      )
        ,.splitter_dst0_vr_noc_dat  (in_manager_notif_noc1_data     )
        ,.dst0_splitter_vr_noc_rdy  (manager_in_notif_noc1_rdy      )

        ,.splitter_dst1_vr_noc_val  (in_wr_buf_noc1_val             )
        ,.splitter_dst1_vr_noc_dat  (in_wr_buf_noc1_data            )
        ,.dst1_splitter_vr_noc_rdy  (wr_buf_in_noc1_rdy             )

        ,.splitter_dst2_vr_noc_val  (in_request_noc1_val            )
        ,.splitter_dst2_vr_noc_dat  (in_request_noc1_data           )
        ,.dst2_splitter_vr_noc_rdy  (request_in_noc1_rdy            )

        ,.splitter_dst3_vr_noc_val  ()
        ,.splitter_dst3_vr_noc_dat  ()
        ,.dst3_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst4_vr_noc_val  ()
        ,.splitter_dst4_vr_noc_dat  ()
        ,.dst4_splitter_vr_noc_rdy  (1'b0)
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC_DATA_W   )
    ) tile_noc1_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (merger_vrtoc_ctrl_noc1_data    )
        ,.src_vrtoc_val     (merger_vrtoc_ctrl_noc1_val     )
        ,.vrtoc_src_rdy     (vrtoc_merger_ctrl_noc1_rdy     )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc1_data    )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc1_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc1_yummy   )
    );
    
    // merge NoC traffic for:
    // - making message buffer requests
    // - making read requests
    // - making stats reads
    beehive_noc_prio_merger #(
         .NOC_DATA_W        (`CTRL_NOC_DATA_W       )
        ,.MSG_PAYLOAD_LEN   (`PAYLOAD_LEN           )
        ,.MSG_LEN_HI        (`CTRL_MSG_LENGTH_HI    )
        ,.MSG_LEN_LO        (`CTRL_MSG_LENGTH_LO    )
        ,.num_sources    (3)
    ) merger_noc1 (   
         .clk   (clk)
        ,.rst_n (~rst)
    
        ,.src0_merger_vr_noc_val    (manager_out_notif_noc1_val     )
        ,.src0_merger_vr_noc_dat    (manager_out_notif_noc1_data    )
        ,.merger_src0_vr_noc_rdy    (notif_manager_out_noc1_rdy     )
    
        ,.src1_merger_vr_noc_val    (rd_buf_out_noc1_val            )
        ,.src1_merger_vr_noc_dat    (rd_buf_out_noc1_data           )
        ,.merger_src1_vr_noc_rdy    (out_rd_buf_noc1_rdy            )
    
        ,.src2_merger_vr_noc_val    (request_out_noc1_val           )
        ,.src2_merger_vr_noc_dat    (request_out_noc1_data          )
        ,.merger_src2_vr_noc_rdy    (out_request_noc1_rdy           )
    
        ,.src3_merger_vr_noc_val    ('0)
        ,.src3_merger_vr_noc_dat    ('0)
        ,.merger_src3_vr_noc_rdy    ()
    
        ,.src4_merger_vr_noc_val    ('0)
        ,.src4_merger_vr_noc_dat    ('0)
        ,.merger_src4_vr_noc_rdy    ()
    
        ,.merger_dst_vr_noc_val     (merger_vrtoc_ctrl_noc1_val     )
        ,.merger_dst_vr_noc_dat     (merger_vrtoc_ctrl_noc1_data    )
        ,.dst_merger_vr_noc_rdy     (vrtoc_merger_data_noc0_rdy     )
    );

    stats_manager #(
         .NOC0_DATA_W   (`NOC_DATA_WIDTH        )
        ,.NOC1_DATA_W   (`CTRL_NOC_DATA_W       )
        ,.SRC_X         (APP_TILE_SRC_X         )
        ,.SRC_Y         (APP_TILE_SRC_Y         )
        ,.TX_DST_DRAM_X (APP_TILE_TX_DST_BUF_X  )
        ,.TX_DST_DRAM_Y (APP_TILE_TX_DST_BUF_Y  )
        ,.RX_DST_DRAM_X (APP_TILE_RX_DST_BUF_X  )
        ,.RX_DST_DRAM_Y (APP_TILE_RX_DST_BUF_Y  )
    ) manager (
         .clk   (clk    )
        ,.rst   (rst    )
    
        ,.in_manager_noc0_val           (in_manager_noc0_val            )
        ,.in_manager_noc0_data          (in_manager_noc0_data           )
        ,.manager_in_noc0_rdy           (manager_in_noc0_rdy            )
                                                                        
        ,.in_manager_notif_noc1_val     (in_manager_notif_noc1_val      )
        ,.in_manager_notif_noc1_data    (in_manager_notif_noc1_data     )
        ,.manager_in_notif_noc1_rdy     (manager_in_notif_noc1_rdy      )
                                                                        
        ,.manager_out_notif_noc1_val    (manager_out_notif_noc1_val     )
        ,.manager_out_notif_noc1_data   (manager_out_notif_noc1_data    )
        ,.notif_manager_out_noc1_rdy    (notif_manager_out_noc1_rdy     )
                                                                        
        ,.rd_buf_out_noc1_val           (rd_buf_out_noc1_val            )
        ,.rd_buf_out_noc1_data          (rd_buf_out_noc1_data           )
        ,.out_rd_buf_noc1_rdy           (out_rd_buf_noc1_rdy            )
                                                                        
        ,.in_rd_buf_noc0_val            (in_rd_buf_noc0_val             )
        ,.in_rd_buf_noc0_data           (in_rd_buf_noc0_data            )
        ,.rd_buf_in_noc0_rdy            (rd_buf_in_noc0_rdy             )
                                                                        
        ,.wr_buf_out_noc0_val           (wr_buf_out_noc0_val            )
        ,.wr_buf_out_noc0_data          (wr_buf_out_noc0_data           )
        ,.out_wr_buf_noc0_rdy           (out_wr_buf_noc0_rdy            )
                                                                        
        ,.in_wr_buf_noc1_val            (in_wr_buf_noc1_val             )
        ,.in_wr_buf_noc1_data           (in_wr_buf_noc1_data            )
        ,.wr_buf_in_noc1_rdy            (wr_buf_in_noc1_rdy             )
                                                                        
        ,.in_request_noc1_val           (in_request_noc1_val            )
        ,.in_request_noc1_data          (in_request_noc1_data           )
        ,.request_in_noc1_rdy           (request_in_noc1_rdy            )
                                                                        
        ,.request_out_noc1_val          (request_out_noc1_val           )
        ,.request_out_noc1_data         (request_out_noc1_data          )
        ,.out_request_noc1_rdy          (out_request_noc1_rdy           )
    );

endmodule
