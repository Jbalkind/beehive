<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module udp_pkt_gen_tile #(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
)(
     input clk
    ,input rst

<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="udp_pkt_gen",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);

<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router", nocs=tile_config.nocs,
        noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>

    logic                           noc_pkt_gen_in_val;
    logic   [`NOC_DATA_WIDTH-1:0]   noc_pkt_gen_in_data;
    logic                           pkt_gen_in_noc_rdy;

    logic                           pkt_gen_out_noc_val;
    logic   [`NOC_DATA_WIDTH-1:0]   pkt_gen_out_noc_data;
    logic                           noc_pkt_gen_out_rdy;

    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) udp_app_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="udp_pkt_gen", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) tile_rx_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_data_noc0_data    )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val     )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy   )

        //val/rdy interface
        ,.ctovr_dst_data    (noc_pkt_gen_in_data            )
        ,.ctovr_dst_val     (noc_pkt_gen_in_val             )
        ,.dst_ctovr_rdy     (pkt_gen_in_noc_rdy             )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) tile_rx_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (pkt_gen_out_noc_data           )
        ,.src_vrtoc_val     (pkt_gen_out_noc_val            )
        ,.vrtoc_src_rdy     (noc_pkt_gen_out_rdy            )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );

    packet_gen_wrap #(
         .NOC_DATA_W(`NOC_DATA_WIDTH    )
        ,.SRC_X     (SRC_X              )
        ,.SRC_Y     (SRC_Y              )
    ) pkt_gen (
         .clk   (clk    )
        ,.rst   (rst    )
    
        ,.noc_pkt_gen_in_val    (noc_pkt_gen_in_val     )
        ,.noc_pkt_gen_in_data   (noc_pkt_gen_in_data    )
        ,.pkt_gen_in_noc_rdy    (pkt_gen_in_noc_rdy     )
                                                        
        ,.pkt_gen_out_noc_val   (pkt_gen_out_noc_val    )
        ,.pkt_gen_out_noc_data  (pkt_gen_out_noc_data   )
        ,.noc_pkt_gen_out_rdy   (noc_pkt_gen_out_rdy    )
    );
endmodule
