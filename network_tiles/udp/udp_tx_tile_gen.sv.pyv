`include "udp_tx_tile_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module udp_tx_tile #(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
    ,parameter USE_INT_LB = 0
)(
     input clk
    ,input rst
<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="udp_tx",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);

<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router", nocs=tile_config.nocs,
        noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>
    
    logic                           udp_tx_out_noc0_vrtoc_val;
    logic   [`NOC_DATA_WIDTH-1:0]   udp_tx_out_noc0_vrtoc_data;    
    logic                           noc0_vrtoc_udp_tx_out_rdy;
    
    logic                           noc0_ctovr_udp_tx_in_val;
    logic   [`NOC_DATA_WIDTH-1:0]   noc0_ctovr_udp_tx_in_data;
    logic                           udp_tx_in_noc0_ctovr_rdy;
    
    logic                           udp_tx_out_lb_val;
    logic   [`NOC_DATA_WIDTH-1:0]   udp_tx_out_lb_data;    
    logic                           lb_udp_tx_out_rdy;

    logic                           lb_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   lb_vrtoc_data_noc0_data;    
    logic                           vrtoc_lb_data_noc0_rdy;
    
    logic                           udp_tx_in_udp_to_stream_hdr_val;
    logic   [`IP_ADDR_W-1:0]        udp_tx_in_udp_to_stream_src_ip_addr;
    logic   [`IP_ADDR_W-1:0]        udp_tx_in_udp_to_stream_dst_ip_addr;
    udp_pkt_hdr                     udp_tx_in_udp_to_stream_udp_hdr;
    logic   [MSG_TIMESTAMP_W-1:0]   udp_tx_in_udp_to_stream_timestamp;
    logic                           udp_to_stream_udp_tx_in_hdr_rdy;
    
    logic                           udp_tx_in_udp_to_stream_data_val;
    logic   [`NOC_DATA_WIDTH-1:0]   udp_tx_in_udp_to_stream_data;
    logic                           udp_tx_in_udp_to_stream_data_last;
    logic   [`NOC_PADBYTES_WIDTH-1:0] udp_tx_in_udp_to_stream_data_padbytes;
    logic                           udp_to_stream_udp_tx_in_data_rdy;
    
    logic                           udp_to_stream_udp_tx_out_hdr_val;
    logic   [`IP_ADDR_W-1:0]        udp_to_stream_udp_tx_out_src_ip;
    logic   [`IP_ADDR_W-1:0]        udp_to_stream_udp_tx_out_dst_ip;
    logic   [`TOT_LEN_W-1:0]        udp_to_stream_udp_tx_out_udp_len;
    logic   [`PROTOCOL_W-1:0]       udp_to_stream_udp_tx_out_protocol;
    logic   [MSG_TIMESTAMP_W-1:0]   udp_to_stream_udp_tx_out_timestamp;
    logic                           udp_tx_out_udp_to_stream_hdr_rdy;
    
    logic                           udp_to_stream_udp_tx_out_val;
    logic   [`NOC_DATA_WIDTH-1:0]   udp_to_stream_udp_tx_out_data;
    logic                           udp_to_stream_udp_tx_out_last;
    logic   [`NOC_PADBYTES_WIDTH-1:0] udp_to_stream_udp_tx_out_padbytes;
    logic                           udp_tx_out_udp_to_stream_rdy;
    
    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) udp_tx_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="udp_tx", nocs=tile_config.nocs)
    print(noc_ports)
   

    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) tile_tx_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_data_noc0_data    )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val     )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy   )

        //val/rdy interface
        ,.ctovr_dst_data    (noc0_ctovr_udp_tx_in_data      )
        ,.ctovr_dst_val     (noc0_ctovr_udp_tx_in_val       )
        ,.dst_ctovr_rdy     (udp_tx_in_noc0_ctovr_rdy       )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) tile_tx_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (lb_vrtoc_data_noc0_data        )
        ,.src_vrtoc_val     (lb_vrtoc_data_noc0_val         )
        ,.vrtoc_src_rdy     (vrtoc_lb_data_noc0_rdy         )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );

    logic                           udp_tx_in_buf_rd_val;
    logic   [`NOC_DATA_WIDTH-1:0]   udp_tx_in_buf_rd_data;
    logic                           udp_tx_in_buf_rd_yumi;
    logic                           udp_tx_in_buf_rd_rdy;
    assign udp_tx_in_buf_rd_yumi = udp_tx_in_buf_rd_rdy & udp_tx_in_buf_rd_val;

    bsg_two_fifo #(
        .width_p    (`NOC_DATA_WIDTH    )
    ) udp_tx_in_buf (
         .clk_i     (clk    )
        ,.reset_i   (rst    )
        
        ,.ready_o   (udp_tx_in_noc0_ctovr_rdy   )
        ,.data_i    (noc0_ctovr_udp_tx_in_data  )
        ,.v_i       (noc0_ctovr_udp_tx_in_val   )
        
        ,.v_o       (udp_tx_in_buf_rd_val       )
        ,.data_o    (udp_tx_in_buf_rd_data      )
        ,.yumi_i    (udp_tx_in_buf_rd_yumi      )
    );


   udp_tx_noc_in tx_noc_in (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.noc0_ctovr_udp_tx_in_val              (udp_tx_in_buf_rd_val   )
        ,.noc0_ctovr_udp_tx_in_data             (udp_tx_in_buf_rd_data  )
        ,.udp_tx_in_noc0_ctovr_rdy              (udp_tx_in_buf_rd_rdy   )
        
        ,.udp_tx_in_udp_to_stream_hdr_val       (udp_tx_in_udp_to_stream_hdr_val        )
        ,.udp_tx_in_udp_to_stream_src_ip_addr   (udp_tx_in_udp_to_stream_src_ip_addr    )
        ,.udp_tx_in_udp_to_stream_dst_ip_addr   (udp_tx_in_udp_to_stream_dst_ip_addr    )
        ,.udp_tx_in_udp_to_stream_udp_hdr       (udp_tx_in_udp_to_stream_udp_hdr        )
        ,.udp_tx_in_udp_to_stream_timestamp     (udp_tx_in_udp_to_stream_timestamp      )
        ,.udp_to_stream_udp_tx_in_hdr_rdy       (udp_to_stream_udp_tx_in_hdr_rdy        )
                                                                                        
        ,.udp_tx_in_udp_to_stream_data_val      (udp_tx_in_udp_to_stream_data_val       )
        ,.udp_tx_in_udp_to_stream_data          (udp_tx_in_udp_to_stream_data           )
        ,.udp_tx_in_udp_to_stream_data_last     (udp_tx_in_udp_to_stream_data_last      )
        ,.udp_tx_in_udp_to_stream_data_padbytes (udp_tx_in_udp_to_stream_data_padbytes  )
        ,.udp_to_stream_udp_tx_in_data_rdy      (udp_to_stream_udp_tx_in_data_rdy       )
    );

    udp_to_stream #(
        .DATA_WIDTH (`NOC_DATA_WIDTH    )
    ) udp_to_stream (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.src_udp_to_stream_hdr_val         (udp_tx_in_udp_to_stream_hdr_val        )
        ,.src_udp_to_stream_src_ip_addr     (udp_tx_in_udp_to_stream_src_ip_addr    )
        ,.src_udp_to_stream_dst_ip_addr     (udp_tx_in_udp_to_stream_dst_ip_addr    )
        ,.src_udp_to_stream_udp_hdr         (udp_tx_in_udp_to_stream_udp_hdr        )
        ,.src_udp_to_stream_timestamp       (udp_tx_in_udp_to_stream_timestamp      )
        ,.udp_to_stream_src_hdr_rdy         (udp_to_stream_udp_tx_in_hdr_rdy        )
        
        ,.src_udp_to_stream_data_val        (udp_tx_in_udp_to_stream_data_val       )
        ,.src_udp_to_stream_data            (udp_tx_in_udp_to_stream_data           )
        ,.src_udp_to_stream_data_last       (udp_tx_in_udp_to_stream_data_last      )
        ,.src_udp_to_stream_data_padbytes   (udp_tx_in_udp_to_stream_data_padbytes  )
        ,.udp_to_stream_src_data_rdy        (udp_to_stream_udp_tx_in_data_rdy       )
    
        ,.udp_to_stream_dst_hdr_val         (udp_to_stream_udp_tx_out_hdr_val       )
        ,.udp_to_stream_dst_src_ip          (udp_to_stream_udp_tx_out_src_ip        )
        ,.udp_to_stream_dst_dst_ip          (udp_to_stream_udp_tx_out_dst_ip        )
        ,.udp_to_stream_dst_udp_len         (udp_to_stream_udp_tx_out_udp_len       )
        ,.udp_to_stream_dst_protocol        (udp_to_stream_udp_tx_out_protocol      )
        ,.udp_to_stream_dst_timestamp       (udp_to_stream_udp_tx_out_timestamp     )
        ,.dst_udp_to_stream_hdr_rdy         (udp_tx_out_udp_to_stream_hdr_rdy       )
        
        ,.udp_to_stream_dst_val             (udp_to_stream_udp_tx_out_val           )
        ,.udp_to_stream_dst_data            (udp_to_stream_udp_tx_out_data          )
        ,.udp_to_stream_dst_last            (udp_to_stream_udp_tx_out_last          )
        ,.udp_to_stream_dst_padbytes        (udp_to_stream_udp_tx_out_padbytes      )
        ,.dst_udp_to_stream_rdy             (udp_tx_out_udp_to_stream_rdy           )
    );

    udp_tx_noc_out_copy #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) tx_noc_out (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.udp_tx_out_noc0_vrtoc_val         (udp_tx_out_lb_val                  )
        ,.udp_tx_out_noc0_vrtoc_data        (udp_tx_out_lb_data                 )
        ,.noc0_vrtoc_udp_tx_out_rdy         (lb_udp_tx_out_rdy                  )
                                                                                
        ,.udp_to_stream_udp_tx_out_hdr_val  (udp_to_stream_udp_tx_out_hdr_val   )
        ,.udp_to_stream_udp_tx_out_src_ip   (udp_to_stream_udp_tx_out_src_ip    )
        ,.udp_to_stream_udp_tx_out_dst_ip   (udp_to_stream_udp_tx_out_dst_ip    )
        ,.udp_to_stream_udp_tx_out_udp_len  (udp_to_stream_udp_tx_out_udp_len   )
        ,.udp_to_stream_udp_tx_out_protocol (udp_to_stream_udp_tx_out_protocol  )
        ,.udp_to_stream_udp_tx_out_timestamp(udp_to_stream_udp_tx_out_timestamp )
        ,.udp_tx_out_udp_to_stream_hdr_rdy  (udp_tx_out_udp_to_stream_hdr_rdy   )
                                                                                
        ,.udp_to_stream_udp_tx_out_val      (udp_to_stream_udp_tx_out_val       )
        ,.udp_to_stream_udp_tx_out_data     (udp_to_stream_udp_tx_out_data      )
        ,.udp_to_stream_udp_tx_out_last     (udp_to_stream_udp_tx_out_last      )
        ,.udp_to_stream_udp_tx_out_padbytes (udp_to_stream_udp_tx_out_padbytes  )
        ,.udp_tx_out_udp_to_stream_rdy      (udp_tx_out_udp_to_stream_rdy       )
    );

generate
    if (USE_INT_LB == 1) begin
        udp_tx_lb_out lb (
             .clk   (clk    )
            ,.rst   (rst    )
            
            ,.src_udp_tx_lb_val     (udp_tx_out_lb_val  )
            ,.src_udp_tx_lb_data    (udp_tx_out_lb_data )
            ,.udp_tx_lb_src_rdy     (lb_udp_tx_out_rdy  )
        
            ,.udp_tx_lb_dst_val     (lb_vrtoc_data_noc0_val  )
            ,.udp_tx_lb_dst_data    (lb_vrtoc_data_noc0_data )
            ,.dst_udp_tx_lb_rdy     (vrtoc_lb_data_noc0_rdy  )
        );
    end
    else begin
        assign lb_vrtoc_data_noc0_val = udp_tx_out_lb_val;
        assign lb_vrtoc_data_noc0_data = udp_tx_out_lb_data;
        assign lb_udp_tx_out_rdy = vrtoc_lb_data_noc0_rdy;
    end
endgenerate

endmodule
