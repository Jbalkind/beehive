`include "eth_tx_tile_defs.svh"
`include "eth_latency_stats_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module eth_tx_tile #(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
)(
     input clk
    ,input rst
    
    ,output logic                               engine_mac_tx_val
    ,input                                      mac_engine_tx_rdy
    ,output logic                               engine_mac_tx_startframe
    ,output logic   [`MTU_SIZE_W-1:0]           engine_mac_tx_frame_size 
    ,output logic                               engine_mac_tx_endframe
    ,output logic   [`MAC_INTERFACE_W-1:0]      engine_mac_tx_data
    ,output logic   [`MAC_PADBYTES_W-1:0]       engine_mac_tx_padbytes
<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="eth_tx",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);

<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router", nocs=tile_config.nocs,
        noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>

    logic                           eth_tx_out_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   eth_tx_out_vrtoc_data_noc0_data;    
    logic                           vrtoc_eth_tx_out_data_noc0_rdy;
    
    logic                           ctovr_eth_tx_in_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ctovr_eth_tx_in_data_noc0_data;
    logic                           eth_tx_in_ctovr_data_noc0_rdy;     
    
    logic                           eth_stats_out_vrtoc_ctrl_noc2_val;
    logic   [`CTRL_NOC2_DATA_W-1:0] eth_stats_out_vrtoc_ctrl_noc2_data;
    logic                           vrtoc_eth_stats_out_ctrl_noc2_rdy;
    
    logic                           ctovr_eth_stats_in_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] ctovr_eth_stats_in_ctrl_noc1_data;
    logic                           eth_stats_in_ctovr_ctrl_noc1_rdy;     
    
    logic                           eth_tx_in_eth_tostream_eth_hdr_val;
    eth_hdr                         eth_tx_in_eth_tostream_eth_hdr;
    logic   [`MTU_SIZE_W-1:0]       eth_tx_in_eth_tostream_payload_len;
    logic   [MSG_TIMESTAMP_W-1:0]   eth_tx_in_eth_tostream_timestamp;
    logic                           eth_tostream_eth_tx_in_eth_hdr_rdy;

    logic                           eth_tx_in_eth_tostream_data_val;
    logic   [`MAC_INTERFACE_W-1:0]  eth_tx_in_eth_tostream_data;
    logic                           eth_tx_in_eth_tostream_data_last;
    logic   [`MAC_PADBYTES_W-1:0]   eth_tx_in_eth_tostream_data_padbytes;
    logic                           eth_tostream_eth_tx_in_data_rdy;
    
    logic                           eth_wr_log;
    logic   [MSG_TIMESTAMP_W-1:0]   eth_wr_log_start_timestamp;
    
    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) eth_tx_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="eth_tx", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );


    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        
        ,.src_ctovr_data    (router_ctovr_data_noc0_data        )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val         )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy       )

        ,.ctovr_dst_data    (ctovr_eth_tx_in_data_noc0_data     )
        ,.ctovr_dst_val     (ctovr_eth_tx_in_data_noc0_val      )
        ,.dst_ctovr_rdy     (eth_tx_in_ctovr_data_noc0_rdy      )
    );

    assign eth_tx_out_vrtoc_data_noc0_val = 1'b0;
    assign eth_tx_out_vrtoc_data_noc0_data = '0;

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    (eth_tx_out_vrtoc_data_noc0_data    )
        ,.src_vrtoc_val     (eth_tx_out_vrtoc_data_noc0_val     )
        ,.vrtoc_src_rdy     (vrtoc_eth_tx_out_data_noc0_rdy     )

        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data        )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val         )
		,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy       )
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC1_DATA_W  )
    ) ctrl_noc1_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        
        ,.src_ctovr_data    (router_ctovr_ctrl_noc1_data        )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc1_val         )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc1_yummy       )

        ,.ctovr_dst_data    (ctovr_eth_stats_in_ctrl_noc1_data  )
        ,.ctovr_dst_val     (ctovr_eth_stats_in_ctrl_noc1_val   )
        ,.dst_ctovr_rdy     (eth_stats_in_ctovr_ctrl_noc1_rdy   )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC1_DATA_W  )
    ) ctrl_noc1_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    ('0)
        ,.src_vrtoc_val     ('0)
        ,.vrtoc_src_rdy     (  )

        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc1_data        )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc1_val         )
		,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc1_yummy       )
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC2_DATA_W  )
    ) ctrl_noc2_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        
        ,.src_ctovr_data    (router_ctovr_ctrl_noc2_data    )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc2_val     )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc2_yummy   )

        ,.ctovr_dst_data    ()
        ,.ctovr_dst_val     ()
        ,.dst_ctovr_rdy     ('0)
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC2_DATA_W  )
    ) ctrl_noc2_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    (eth_stats_out_vrtoc_ctrl_noc2_data )
        ,.src_vrtoc_val     (eth_stats_out_vrtoc_ctrl_noc2_val  )
        ,.vrtoc_src_rdy     (vrtoc_eth_stats_out_ctrl_noc2_rdy  )

        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc2_data        )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc2_val         )
		,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc2_yummy       )
    );
    
    eth_tx_noc_in eth_tx_noc_in (
         .clk   (clk)
        ,.rst   (rst)
        
        ,.noc0_ctovr_eth_tx_in_val              (ctovr_eth_tx_in_data_noc0_val          )
        ,.noc0_ctovr_eth_tx_in_data             (ctovr_eth_tx_in_data_noc0_data         )
        ,.eth_tx_in_noc0_ctovr_rdy              (eth_tx_in_ctovr_data_noc0_rdy          )

        ,.eth_tx_in_eth_tostream_eth_hdr_val    (eth_tx_in_eth_tostream_eth_hdr_val     )
        ,.eth_tx_in_eth_tostream_eth_hdr        (eth_tx_in_eth_tostream_eth_hdr         )
        ,.eth_tx_in_eth_tostream_payload_len    (eth_tx_in_eth_tostream_payload_len     )
        ,.eth_tostream_eth_tx_in_eth_hdr_rdy    (eth_tostream_eth_tx_in_eth_hdr_rdy     )
                                                                                        
        ,.eth_tx_in_eth_tostream_data_val       (eth_tx_in_eth_tostream_data_val        )
        ,.eth_tx_in_eth_tostream_data           (eth_tx_in_eth_tostream_data            )
        ,.eth_tx_in_eth_tostream_data_last      (eth_tx_in_eth_tostream_data_last       )
        ,.eth_tx_in_eth_tostream_data_padbytes  (eth_tx_in_eth_tostream_data_padbytes   )
        ,.eth_tostream_eth_tx_in_data_rdy       (eth_tostream_eth_tx_in_data_rdy        )

        ,.eth_wr_log                            (eth_wr_log                             )
        ,.eth_wr_log_start_timestamp            (eth_wr_log_start_timestamp             )
    );
    
    eth_hdrtostream eth_hdrtostream (
         .clk   (clk)
        ,.rst   (rst)
    
        ,.src_eth_hdrtostream_eth_hdr_val   (eth_tx_in_eth_tostream_eth_hdr_val     )
        ,.src_eth_hdrtostream_eth_hdr       (eth_tx_in_eth_tostream_eth_hdr         )
        ,.src_eth_hdrtostream_payload_len   (eth_tx_in_eth_tostream_payload_len     )
        ,.eth_hdrtostream_src_eth_hdr_rdy   (eth_tostream_eth_tx_in_eth_hdr_rdy     )
    
        ,.src_eth_hdrtostream_data_val      (eth_tx_in_eth_tostream_data_val        )
        ,.src_eth_hdrtostream_data          (eth_tx_in_eth_tostream_data            )
        ,.src_eth_hdrtostream_data_last     (eth_tx_in_eth_tostream_data_last       )
        ,.src_eth_hdrtostream_data_padbytes (eth_tx_in_eth_tostream_data_padbytes   )
        ,.eth_hdrtostream_src_data_rdy      (eth_tostream_eth_tx_in_data_rdy        )
    
        ,.eth_hdrtostream_dst_data_val      (engine_mac_tx_val                      )
        ,.eth_hdrtostream_dst_startframe    (engine_mac_tx_startframe               )
        ,.eth_hdrtostream_dst_frame_size    (engine_mac_tx_frame_size               )
        ,.eth_hdrtostream_dst_endframe      (engine_mac_tx_endframe                 )
        ,.eth_hdrtostream_dst_data          (engine_mac_tx_data                     )
        ,.eth_hdrtostream_dst_data_padbytes (engine_mac_tx_padbytes                 )
        ,.dst_eth_hdrtostream_data_rdy      (mac_engine_tx_rdy                      )
    );
    
    eth_latency_stats #(
         .SRC_X         (SRC_X              )
        ,.SRC_Y         (SRC_Y              )
        ,.NOC1_DATA_W   (`CTRL_NOC1_DATA_W  )
        ,.NOC2_DATA_W   (`CTRL_NOC2_DATA_W  )
    ) stats (
         .clk   (clk    )
        ,.rst   (rst    )

        ,.eth_wr_log                    (eth_wr_log                         )
        ,.eth_wr_log_start_timestamp    (eth_wr_log_start_timestamp         )

        ,.ctovr_eth_stats_in_val        (ctovr_eth_stats_in_ctrl_noc1_val   )
        ,.ctovr_eth_stats_in_data       (ctovr_eth_stats_in_ctrl_noc1_data  )
        ,.eth_stats_in_ctovr_rdy        (eth_stats_in_ctovr_ctrl_noc1_rdy   )

        ,.eth_stats_out_vrtoc_val       (eth_stats_out_vrtoc_ctrl_noc2_val  )
        ,.eth_stats_out_vrtoc_data      (eth_stats_out_vrtoc_ctrl_noc2_data )
        ,.vrtoc_eth_stats_out_rdy       (vrtoc_eth_stats_out_ctrl_noc2_rdy  )
    );
endmodule
