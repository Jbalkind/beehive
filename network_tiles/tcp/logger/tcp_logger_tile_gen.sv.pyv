`include "tcp_logger_tile_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module tcp_logger_tile #(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
    ,parameter FORWARD_X = -1
    ,parameter FORWARD_Y = -1
)(
     input  clk
    ,input  rst
<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="tcp_logger",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);
    
<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router", nocs=tile_config.nocs,
        noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>

    logic                           noc0_ctovr_splitter_val;
    logic   [`NOC_DATA_WIDTH-1:0]   noc0_ctovr_splitter_data;
    logic                           splitter_noc0_ctovr_rdy;

    logic                           merger_noc0_vrtoc_val;
    logic   [`NOC_DATA_WIDTH-1:0]   merger_noc0_vrtoc_data;
    logic                           noc0_vrtoc_merger_rdy;
    
    logic                           noc0_logger_record_val;
    logic   [`NOC_DATA_WIDTH-1:0]   noc0_logger_record_data;
    logic                           logger_record_noc0_rdy;
    
    logic                           logger_record_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   logger_record_noc0_data;
    logic                           noc0_logger_record_rdy;
    
    logic                           noc0_logger_read_val;
    logic   [`NOC_DATA_WIDTH-1:0]   noc0_logger_read_data;
    logic                           logger_read_noc0_rdy;

    logic                           logger_read_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   logger_read_noc0_data;
    logic                           noc0_logger_read_rdy;
    
    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) tcp_logger_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="tcp_logger", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) tile_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_data_noc0_data    )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val     )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy   )

        //val/rdy interface
        ,.ctovr_dst_data    (noc0_ctovr_splitter_data       )
        ,.ctovr_dst_val     (noc0_ctovr_splitter_val        )
        ,.dst_ctovr_rdy     (splitter_noc0_ctovr_rdy        )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) tile_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (merger_noc0_vrtoc_data         )
        ,.src_vrtoc_val     (merger_noc0_vrtoc_val          )
        ,.vrtoc_src_rdy     (noc0_vrtoc_merger_rdy          )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );

    beehive_noc_prio_merger #(
         .NOC_DATA_W        (`NOC_DATA_WIDTH    )
        ,.MSG_PAYLOAD_LEN   (`PAYLOAD_LEN       )
        ,.MSG_LEN_HI        (`MSG_LENGTH_HI     )
        ,.MSG_LEN_LO        (`MSG_LENGTH_LO     )
        ,.num_sources       (2)
    ) merger (   
         .clk   (clk)
        ,.rst_n (~rst)
    
        ,.src0_merger_vr_noc_val    (logger_record_noc0_val     )
        ,.src0_merger_vr_noc_dat    (logger_record_noc0_data    )
        ,.merger_src0_vr_noc_rdy    (noc0_logger_record_rdy     )
    
        ,.src1_merger_vr_noc_val    (logger_read_noc0_val       )
        ,.src1_merger_vr_noc_dat    (logger_read_noc0_data      )
        ,.merger_src1_vr_noc_rdy    (noc0_logger_read_rdy       )
    
        ,.src2_merger_vr_noc_val    ('0)
        ,.src2_merger_vr_noc_dat    ('0)
        ,.merger_src2_vr_noc_rdy    ()
    
        ,.src3_merger_vr_noc_val    ('0)
        ,.src3_merger_vr_noc_dat    ('0)
        ,.merger_src3_vr_noc_rdy    ()
    
        ,.src4_merger_vr_noc_val    ('0)
        ,.src4_merger_vr_noc_dat    ('0)
        ,.merger_src4_vr_noc_rdy    ()
    
        ,.merger_dst_vr_noc_val     (merger_noc0_vrtoc_val      )
        ,.merger_dst_vr_noc_dat     (merger_noc0_vrtoc_data     )
        ,.dst_merger_vr_noc_rdy     (noc0_vrtoc_merger_rdy      )
    );

    // split between the record and read paths
    beehive_noc_fbits_splitter #(
         .NOC_DATA_W        (`NOC_DATA_WIDTH    )
        ,.MSG_PAYLOAD_LEN   (`PAYLOAD_LEN       )
        ,.MSG_LEN_HI        (`MSG_LENGTH_HI     )
        ,.MSG_LEN_LO        (`MSG_LENGTH_LO     )
        ,.FBITS_HI          (`MSG_DST_FBITS_HI  )
        ,.FBITS_LO          (`MSG_DST_FBITS_LO  )
        ,.num_targets       (3'd2)
        ,.fbits_type0       (PKT_IF_FBITS               )
        ,.fbits_type1       (TCP_LOGGER_READ_IF_FBITS   )
    ) splitter (
         .clk   (clk    )
        ,.rst_n (~rst   )

        ,.src_splitter_vr_noc_val   (noc0_ctovr_splitter_val    )
        ,.src_splitter_vr_noc_dat   (noc0_ctovr_splitter_data   )
        ,.splitter_src_vr_noc_rdy   (splitter_noc0_ctovr_rdy    )

        ,.splitter_dst0_vr_noc_val  (noc0_logger_record_val     )
        ,.splitter_dst0_vr_noc_dat  (noc0_logger_record_data    )
        ,.dst0_splitter_vr_noc_rdy  (logger_record_noc0_rdy     )

        ,.splitter_dst1_vr_noc_val  (noc0_logger_read_val       )
        ,.splitter_dst1_vr_noc_dat  (noc0_logger_read_data      )
        ,.dst1_splitter_vr_noc_rdy  (logger_record_noc0_rdy     )

        ,.splitter_dst2_vr_noc_val  ()
        ,.splitter_dst2_vr_noc_dat  ()
        ,.dst2_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst3_vr_noc_val  ()
        ,.splitter_dst3_vr_noc_dat  ()
        ,.dst3_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst4_vr_noc_val  ()
        ,.splitter_dst4_vr_noc_dat  ()
        ,.dst4_splitter_vr_noc_rdy  (1'b0)
    );

    tcp_logger_wrap #(
         .LOG_ENTRIES_LOG_2 (TCP_LOG_ENTRIES_LOG_2  )
        ,.LOG_CLIENT_ADDR_W (TCP_LOG_CLIENT_ADDR_W  )
        ,.SRC_X             (SRC_X                  )
        ,.SRC_Y             (SRC_Y                  )
        ,.FORWARD_X         (FORWARD_X              )
        ,.FORWARD_Y         (FORWARD_Y              )
        ,.NOC1_DATA_W       (`NOC_DATA_WIDTH        )
        ,.NOC2_DATA_W       (`NOC_DATA_WIDTH        )
    ) logger_wrap (
         .clk   (clk    )
        ,.rst   (rst    )

        ,.noc0_logger_record_val    (noc0_logger_record_val     )
        ,.noc0_logger_record_data   (noc0_logger_record_data    )
        ,.logger_record_noc0_rdy    (logger_record_noc0_rdy     )

        ,.logger_record_noc0_val    (logger_record_noc0_val     )
        ,.logger_record_noc0_data   (logger_record_noc0_data    )
        ,.noc0_logger_record_rdy    (noc0_logger_record_rdy     )

        ,.noc_logger_read_val       (noc0_logger_read_val       )
        ,.noc_logger_read_data      (noc0_logger_read_data      )
        ,.logger_read_noc_rdy       (logger_read_noc0_rdy       )

        ,.logger_read_noc_val       (logger_read_noc0_val       )
        ,.logger_read_noc_data      (logger_read_noc0_data      )
        ,.noc_logger_read_rdy       (noc0_logger_read_rdy       )
    );

endmodule
