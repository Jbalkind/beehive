`include "tcp_logger_tile_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module tcp_logger_tile #(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
    ,parameter FORWARD_X = -1
    ,parameter FORWARD_Y = -1
)(
     input  clk
    ,input  rst
<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="tcp_logger",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);
    
<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router", nocs=tile_config.nocs,
        noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>
    logic                           ctovr_logger_record_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ctovr_logger_record_data_noc0_data;
    logic                           logger_record_ctovr_data_noc0_rdy;
    
    logic                           logger_record_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   logger_record_vrtoc_data_noc0_data;
    logic                           vrtoc_logger_record_data_noc0_rdy;
    
    logic                           ctovr_logger_read_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] ctovr_logger_read_ctrl_noc1_data;
    logic                           logger_read_ctovr_ctrl_noc1_rdy;

    logic                           logger_read_vrtoc_ctrl_noc2_val;
    logic   [`CTRL_NOC2_DATA_W-1:0] logger_read_vrtoc_ctrl_noc2_data;
    logic                           vrtoc_logger_read_ctrl_noc2_rdy;
    
    
    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) tcp_logger_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="tcp_logger", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );

    assign vrtoc_router_ctrl_noc1_val = 1'b0;
    assign vrtoc_router_ctrl_noc1_data = '0;
    assign ctovr_router_ctrl_noc2_yummy = 1'b0;
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_data_noc0_data        )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val         )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy       )

        //val/rdy interface
        ,.ctovr_dst_data    (ctovr_logger_record_data_noc0_data )
        ,.ctovr_dst_val     (ctovr_logger_record_data_noc0_val  )
        ,.dst_ctovr_rdy     (logger_record_ctovr_data_noc0_rdy  )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (logger_record_vrtoc_data_noc0_data )
        ,.src_vrtoc_val     (logger_record_vrtoc_data_noc0_val  )
        ,.vrtoc_src_rdy     (vrtoc_logger_record_data_noc0_rdy  )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data        )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val         )
		,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy       )
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC1_DATA_W  )
    ) ctrl_noc1_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_ctrl_noc1_data        )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc1_val         )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc1_yummy       )

        //val/rdy interface
        ,.ctovr_dst_data    (ctovr_logger_read_ctrl_noc1_data   )
        ,.ctovr_dst_val     (ctovr_logger_read_ctrl_noc1_val    )
        ,.dst_ctovr_rdy     (logger_read_ctovr_ctrl_noc1_rdy    )
    );
    
    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC2_DATA_W  )
    ) ctrl_noc2_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (logger_read_vrtoc_ctrl_noc2_data   )
        ,.src_vrtoc_val     (logger_read_vrtoc_ctrl_noc2_val    )
        ,.vrtoc_src_rdy     (vrtoc_logger_read_ctrl_noc2_rdy    )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc2_data        )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc2_val         )
		,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc2_yummy       )
    );
    
    tcp_logger_wrap #(
         .LOG_ENTRIES_LOG_2 (TCP_LOG_ENTRIES_LOG_2  )
        ,.LOG_CLIENT_ADDR_W (TCP_LOG_CLIENT_ADDR_W  )
        ,.SRC_X             (SRC_X                  )
        ,.SRC_Y             (SRC_Y                  )
        ,.FORWARD_X         (FORWARD_X              )
        ,.FORWARD_Y         (FORWARD_Y              )
        ,.NOC1_DATA_W       (`CTRL_NOC1_DATA_W      )
        ,.NOC2_DATA_W       (`CTRL_NOC2_DATA_W      )
    ) logger_wrap (
         .clk   (clk    )
        ,.rst   (rst    )

        ,.noc0_logger_record_val    (ctovr_logger_record_data_noc0_val  )
        ,.noc0_logger_record_data   (ctovr_logger_record_data_noc0_data )
        ,.logger_record_noc0_rdy    (logger_record_ctovr_data_noc0_rdy  )

        ,.logger_record_noc0_val    (logger_record_vrtoc_data_noc0_val  )
        ,.logger_record_noc0_data   (logger_record_vrtoc_data_noc0_data )
        ,.noc0_logger_record_rdy    (vrtoc_logger_record_data_noc0_rdy  )

        ,.noc_logger_read_val       (ctovr_logger_read_ctrl_noc1_val    )
        ,.noc_logger_read_data      (ctovr_logger_read_ctrl_noc1_data   )
        ,.logger_read_noc_rdy       (logger_read_ctovr_ctrl_noc1_rdy    )

        ,.logger_read_noc_val       (logger_read_vrtoc_ctrl_noc2_val    )
        ,.logger_read_noc_data      (logger_read_vrtoc_ctrl_noc2_data   )
        ,.noc_logger_read_rdy       (vrtoc_logger_read_ctrl_noc2_rdy    )
    );
endmodule
