`include "tcp_tx_tile_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module tcp_tx_tile 
import tcp_pkg::*;
import tcp_misc_pkg::*;
#(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
    ,parameter TX_DRAM_X = -1
    ,parameter TX_DRAM_Y = -1
)(
     input clk
    ,input rst
<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="tcp_tx",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
    ,input                                  send_dst_tx_val
    ,input  logic   [FLOWID_W-1:0]          send_dst_tx_flowid
    ,input  logic   [`IP_ADDR_W-1:0]        send_dst_tx_src_ip
    ,input  logic   [`IP_ADDR_W-1:0]        send_dst_tx_dst_ip
    ,input  tcp_pkt_hdr                     send_dst_tx_tcp_hdr
    ,input  payload_buf_struct              send_dst_tx_payload
    ,output                                 dst_send_tx_rdy
    
    ,output logic                           app_tail_ptr_tx_wr_req_val
    ,output logic   [FLOWID_W-1:0]          app_tail_ptr_tx_wr_req_flowid
    ,output logic   [TX_PAYLOAD_PTR_W:0]    app_tail_ptr_tx_wr_req_data
    ,input                                  tail_ptr_app_tx_wr_req_rdy
    
    ,output logic                           app_tail_ptr_tx_rd_req_val
    ,output logic   [FLOWID_W-1:0]          app_tail_ptr_tx_rd_req_flowid
    ,input  logic                           tail_ptr_app_tx_rd_req_rdy

    ,input                                  tail_ptr_app_tx_rd_resp_val
    ,input  logic   [FLOWID_W-1:0]          tail_ptr_app_tx_rd_resp_flowid
    ,input  logic   [TX_PAYLOAD_PTR_W:0]    tail_ptr_app_tx_rd_resp_data
    ,output logic                           app_tail_ptr_tx_rd_resp_rdy

    ,output                                 app_head_ptr_tx_rd_req_val
    ,output         [FLOWID_W-1:0]          app_head_ptr_tx_rd_req_flowid
    ,input  logic                           head_ptr_app_tx_rd_req_rdy

    ,input                                  head_ptr_app_tx_rd_resp_val
    ,input  logic   [FLOWID_W-1:0]          head_ptr_app_tx_rd_resp_flowid
    ,input  logic   [TX_PAYLOAD_PTR_W:0]    head_ptr_app_tx_rd_resp_data
    ,output logic                           app_head_ptr_tx_rd_resp_rdy
    
    ,output logic                           app_sched_update_val
    ,output sched_cmd_struct                app_sched_update_cmd
    ,input  logic                           sched_app_update_rdy
);
    
    typedef struct packed {
        logic   [`MAC_INTERFACE_W-1:0]  data;
        logic   [`MAC_PADBYTES_W-1:0]   padbytes;
        logic                           last;
    } fifo_struct;
    localparam FIFO_STRUCT_W = $bits(fifo_struct);

    logic       payload_fifo_wr_val;
    fifo_struct payload_fifo_wr_data;
    logic       fifo_payload_wr_rdy;

    logic       fifo_chksum_rd_val;
    fifo_struct fifo_chksum_rd_data;
    logic       chksum_fifo_rd_req;
    logic       chksum_fifo_rd_rdy;
    
<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router",
    nocs=tile_config.nocs, noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>
    
    logic                           ctovr_splitter_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ctovr_splitter_data_noc0_data;
    logic                           splitter_ctovr_data_noc0_rdy;     
    
    logic                           merger_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   merger_vrtoc_data_noc0_data;    
    logic                           vrtoc_merger_data_noc0_rdy;
    
    logic                           tcp_tx_out_merger_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   tcp_tx_out_merger_data_noc0_data;
    logic                           merger_tcp_tx_out_data_noc0_rdy;
    
    logic                           splitter_tx_payload_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   splitter_tx_payload_data_noc0_data;
    logic                           tx_payload_splitter_data_noc0_rdy;
    
    logic                           splitter_tcp_tx_ptr_if_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   splitter_tcp_tx_ptr_if_data_noc0_data;
    logic                           tcp_tx_ptr_if_splitter_data_noc0_rdy;     
    
    logic                           tcp_tx_ptr_if_merger_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   tcp_tx_ptr_if_merger_data_noc0_data;    
    logic                           merger_tcp_tx_ptr_if_data_noc0_rdy;
    
    logic                           payload_chksum_tx_hdr_val;
    logic                           chksum_payload_tx_hdr_rdy;
    logic   [`IP_ADDR_W-1:0]        payload_chksum_tx_src_ip;
    logic   [`IP_ADDR_W-1:0]        payload_chksum_tx_dst_ip;
    logic   [`TOT_LEN_W-1:0]        payload_chksum_tx_payload_len;
    tcp_pkt_hdr                     payload_chksum_tx_tcp_hdr;

    logic                           payload_chksum_tx_data_val;
    logic   [`MAC_INTERFACE_W-1:0]  payload_chksum_tx_data;
    logic                           payload_chksum_tx_data_last;
    logic   [`MAC_PADBYTES_W-1:0]   payload_chksum_tx_data_padbytes;
    logic                           chksum_payload_tx_data_rdy;
    
    logic                           chksum_tcp_tx_out_hdr_val;
    logic   [`IP_ADDR_W-1:0]        chksum_tcp_tx_out_src_ip;
    logic   [`IP_ADDR_W-1:0]        chksum_tcp_tx_out_dst_ip;
    logic   [`TOT_LEN_W-1:0]        chksum_tcp_tx_out_tcp_len;
    tcp_pkt_hdr                     chksum_tcp_tx_out_tcp_hdr;
    logic                           tcp_tx_out_chksum_hdr_rdy;

    logic                           chksum_tcp_tx_out_data_val;
    logic                           tcp_tx_out_chksum_data_rdy;
    logic   [`MAC_INTERFACE_W-1:0]  chksum_tcp_tx_out_data;
    logic                           chksum_tcp_tx_out_last;
    logic   [`MAC_PADBYTES_W-1:0]   chksum_tcp_tx_out_padbytes;

    logic                           noc_in_payload_fifo_wr_val;
    logic   [`NOC_DATA_WIDTH-1:0]   noc_in_payload_fifo_wr_data;
    logic                           payload_fifo_noc_in_wr_rdy;

    logic                           payload_fifo_engine_rd_val;
    logic   [`NOC_DATA_WIDTH-1:0]   payload_fifo_engine_rd_data;
    logic                           engine_payload_fifo_rd_rdy;
    logic                           engine_payload_fifo_rd_req;
    
    logic                           merger_vrtoc_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] merger_vrtoc_ctrl_noc1_data;    
    logic                           vrtoc_merger_ctrl_noc1_rdy;
    
    logic                           ctovr_ctd_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] ctovr_ctd_ctrl_noc1_data;
    logic                           ctd_ctovr_ctrl_noc1_rdy;
    
    logic                           ctd_ptr_if_ctrl_noc1_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ctd_ptr_if_ctrl_noc1_data;
    logic                           ptr_if_ctd_ctrl_noc1_rdy;

    logic                           ptr_if_dtc_ctrl_noc1_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ptr_if_dtc_ctrl_noc1_data;
    logic                           dtc_ptr_if_ctrl_noc1_rdy;
    
    logic                           mem_if_dtc_ctrl_noc1_val;
    logic   [`NOC_DATA_WIDTH-1:0]   mem_if_dtc_ctrl_noc1_data;
    logic                           dtc_mem_if_ctrl_noc1_rdy;
    
    logic                           ptr_dtc_merger_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] ptr_dtc_merger_ctrl_noc1_data;
    logic                           merger_ptr_dtc_ctrl_noc1_rdy;

    logic                           mem_dtc_merger_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] mem_dtc_merger_ctrl_noc1_data;
    logic                           merger_mem_dtc_ctrl_noc1_rdy;
    
    logic                           tx_payload_merger_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   tx_payload_merger_data_noc0_data;
    logic                           merger_tx_payload_data_noc0_rdy;
   
    
    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) tcp_tx_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="tcp_tx", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block",
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );
    
    assign ctovr_router_ctrl_noc2_yummy = 1'b0;
    assign vrtoc_router_ctrl_noc2_val = 1'b0;
    assign vrtoc_router_ctrl_noc2_data = '0;
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        
        ,.src_ctovr_data    (router_ctovr_data_noc0_data        )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val         )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy       )

        ,.ctovr_dst_data    (ctovr_splitter_data_noc0_data      )
        ,.ctovr_dst_val     (ctovr_splitter_data_noc0_val       )
        ,.dst_ctovr_rdy     (splitter_ctovr_data_noc0_rdy       )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    (merger_vrtoc_data_noc0_data    )
        ,.src_vrtoc_val     (merger_vrtoc_data_noc0_val     )
        ,.vrtoc_src_rdy     (vrtoc_merger_data_noc0_rdy     )

        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );

    // merge NoC traffic for
    // - sending pkts to the IP engine
    // - sending buffer read requests
    // - responses to apps
    beehive_noc_prio_merger #(
         .NOC_DATA_W        (`NOC_DATA_WIDTH    )
        ,.MSG_PAYLOAD_LEN   (`MSG_LENGTH_WIDTH  )
        ,.MSG_LEN_HI        (`MSG_LENGTH_HI     )
        ,.MSG_LEN_LO        (`MSG_LENGTH_LO     )
        ,.num_sources       (1)
    ) merger (   
         .clk   (clk)
        ,.rst_n (~rst)
    
        ,.src0_merger_vr_noc_val    (tcp_tx_out_merger_data_noc0_val        )
        ,.src0_merger_vr_noc_dat    (tcp_tx_out_merger_data_noc0_data       )
        ,.merger_src0_vr_noc_rdy    (merger_tcp_tx_out_data_noc0_rdy        )
    
        ,.src1_merger_vr_noc_val    ('0)
        ,.src1_merger_vr_noc_dat    ('0)
        ,.merger_src1_vr_noc_rdy    ()
    
        ,.src2_merger_vr_noc_val    ('0)
        ,.src2_merger_vr_noc_dat    ('0)
        ,.merger_src2_vr_noc_rdy    ()
    
        ,.src3_merger_vr_noc_val    ('0)
        ,.src3_merger_vr_noc_dat    ('0)
        ,.merger_src3_vr_noc_rdy    ()
    
        ,.src4_merger_vr_noc_val    ('0)
        ,.src4_merger_vr_noc_dat    ('0)
        ,.merger_src4_vr_noc_rdy    ()
    
        ,.merger_dst_vr_noc_val     (merger_vrtoc_data_noc0_val             )
        ,.merger_dst_vr_noc_dat     (merger_vrtoc_data_noc0_data            )
        ,.dst_merger_vr_noc_rdy     (vrtoc_merger_data_noc0_rdy             )
    );

    // split NoC traffic between
    // - responses to buffer read requests
    // - requests from apps
    beehive_noc_fbits_splitter #(
         .NOC_DATA_W        (`NOC_DATA_WIDTH    )
        ,.MSG_PAYLOAD_LEN   (`MSG_LENGTH_WIDTH  )
        ,.MSG_LEN_HI        (`MSG_LENGTH_HI     )
        ,.MSG_LEN_LO        (`MSG_LENGTH_LO     )
        ,.FBITS_HI          (`MSG_DST_FBITS_HI  )
        ,.FBITS_LO          (`MSG_DST_FBITS_LO  )
        ,.num_targets       (3'd1)
        ,.fbits_type0       (TCP_TX_BUF_IF_FBITS        )
    ) splitter (
         .clk   (clk    )
        ,.rst_n (~rst   )

        ,.src_splitter_vr_noc_val   (ctovr_splitter_data_noc0_val           )
        ,.src_splitter_vr_noc_dat   (ctovr_splitter_data_noc0_data          )
        ,.splitter_src_vr_noc_rdy   (splitter_ctovr_data_noc0_rdy           )

        ,.splitter_dst0_vr_noc_val  (noc_in_payload_fifo_wr_val             )
        ,.splitter_dst0_vr_noc_dat  (noc_in_payload_fifo_wr_data            )
        ,.dst0_splitter_vr_noc_rdy  (payload_fifo_noc_in_wr_rdy             )

        ,.splitter_dst1_vr_noc_val  ()
        ,.splitter_dst1_vr_noc_dat  ()
        ,.dst1_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst2_vr_noc_val  ()
        ,.splitter_dst2_vr_noc_dat  ()
        ,.dst2_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst3_vr_noc_val  ()
        ,.splitter_dst3_vr_noc_dat  ()
        ,.dst3_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst4_vr_noc_val  ()
        ,.splitter_dst4_vr_noc_dat  ()
        ,.dst4_splitter_vr_noc_rdy  (1'b0)
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC1_DATA_W  )
    ) ctrl_noc1_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        
        ,.src_ctovr_data    (router_ctovr_ctrl_noc1_data    )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc1_val     )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc1_yummy   )

        ,.ctovr_dst_data    (ctovr_ctd_ctrl_noc1_data       )
        ,.ctovr_dst_val     (ctovr_ctd_ctrl_noc1_val        )
        ,.dst_ctovr_rdy     (ctd_ctovr_ctrl_noc1_rdy        )
    );
    
    extra_hdr_noc_ctrl_to_data #(
        .EXTRA_W    (TCP_EXTRA_W    )
    ) ptr_if_ctd (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.src_noc_ctd_val   (ctovr_ctd_ctrl_noc1_val    )
        ,.src_noc_ctd_data  (ctovr_ctd_ctrl_noc1_data   )
        ,.noc_ctd_src_rdy   (ctd_ctovr_ctrl_noc1_rdy    )
    
        ,.noc_ctd_dst_val   (ctd_ptr_if_ctrl_noc1_val   )
        ,.noc_ctd_dst_data  (ctd_ptr_if_ctrl_noc1_data  )
        ,.dst_noc_ctd_rdy   (ptr_if_ctd_ctrl_noc1_rdy   )
    );
    
    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC1_DATA_W  )
    ) ctrl_noc1_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    (merger_vrtoc_ctrl_noc1_data    )
        ,.src_vrtoc_val     (merger_vrtoc_ctrl_noc1_val     )
        ,.vrtoc_src_rdy     (vrtoc_merger_ctrl_noc1_rdy     )

        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc1_data    )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc1_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc1_yummy   )
    );
    
    extra_hdr_noc_data_to_ctrl #(
        .EXTRA_W    (TCP_EXTRA_W    )
    ) ptr_if_dtc (
         .clk   (clk    )
        ,.rst   (rst    )
    
        ,.src_noc_dtc_val   (ptr_if_dtc_ctrl_noc1_val       )
        ,.src_noc_dtc_data  (ptr_if_dtc_ctrl_noc1_data      )
        ,.noc_dtc_src_rdy   (dtc_ptr_if_ctrl_noc1_rdy       )
    
        ,.noc_dtc_dst_val   (ptr_dtc_merger_ctrl_noc1_val   )
        ,.noc_dtc_dst_data  (ptr_dtc_merger_ctrl_noc1_data  )
        ,.dst_noc_dtc_rdy   (merger_ptr_dtc_ctrl_noc1_rdy   )
    );
    
    extra_hdr_noc_data_to_ctrl #(
        .EXTRA_W    (DRAM_REQ_W )
    ) dtc_mem_req (
         .clk   (clk    )
        ,.rst   (rst    )
    
        ,.src_noc_dtc_val   (mem_if_dtc_ctrl_noc1_val       )
        ,.src_noc_dtc_data  (mem_if_dtc_ctrl_noc1_data      )
        ,.noc_dtc_src_rdy   (dtc_mem_if_ctrl_noc1_rdy       )
    
        ,.noc_dtc_dst_val   (mem_dtc_merger_ctrl_noc1_val   )
        ,.noc_dtc_dst_data  (mem_dtc_merger_ctrl_noc1_data  )
        ,.dst_noc_dtc_rdy   (merger_mem_dtc_ctrl_noc1_rdy   )
    );


    beehive_noc_prio_merger #(
         .NOC_DATA_W        (`CTRL_NOC1_DATA_W  )
        ,.MSG_PAYLOAD_LEN   (`MSG_LENGTH_WIDTH  )
        ,.MSG_LEN_HI        (CTRL_MSG_LEN_OFFSET)
        ,.num_sources       (2)
    ) ctrl_noc1_merger (
         .clk       (clk    )
        ,.rst_n     (~rst   )
    
        ,.src0_merger_vr_noc_val    (ptr_dtc_merger_ctrl_noc1_val   )
        ,.src0_merger_vr_noc_dat    (ptr_dtc_merger_ctrl_noc1_data  )
        ,.merger_src0_vr_noc_rdy    (merger_ptr_dtc_ctrl_noc1_rdy   )
    
        ,.src1_merger_vr_noc_val    (mem_dtc_merger_ctrl_noc1_val   )
        ,.src1_merger_vr_noc_dat    (mem_dtc_merger_ctrl_noc1_data  )
        ,.merger_src1_vr_noc_rdy    (merger_mem_dtc_ctrl_noc1_rdy   )
    
        ,.src2_merger_vr_noc_val    ()
        ,.src2_merger_vr_noc_dat    ()
        ,.merger_src2_vr_noc_rdy    ()
    
        ,.src3_merger_vr_noc_val    ()
        ,.src3_merger_vr_noc_dat    ()
        ,.merger_src3_vr_noc_rdy    ()
    
        ,.src4_merger_vr_noc_val    ()
        ,.src4_merger_vr_noc_dat    ()
        ,.merger_src4_vr_noc_rdy    ()
    
        ,.merger_dst_vr_noc_val     (merger_vrtoc_ctrl_noc1_val     )
        ,.merger_dst_vr_noc_dat     (merger_vrtoc_ctrl_noc1_data    )
        ,.dst_merger_vr_noc_rdy     (vrtoc_merger_ctrl_noc1_rdy     )
    );

    bsg_fifo_1r1w_small #( 
         .width_p   (`NOC_DATA_WIDTH    )
        ,.els_p     (4                  )
        ,.harden_p  (1                  )
    ) noc_in_payload_fifo ( 
         .clk_i     (clk    )
        ,.reset_i   (rst    )
    
        ,.v_i       (noc_in_payload_fifo_wr_val )
        ,.data_i    (noc_in_payload_fifo_wr_data)
        ,.ready_o   (payload_fifo_noc_in_wr_rdy )
    
        ,.v_o       (payload_fifo_engine_rd_val )
        ,.data_o    (payload_fifo_engine_rd_data)
        ,.yumi_i    (engine_payload_fifo_rd_req )
    );

    assign engine_payload_fifo_rd_req = payload_fifo_engine_rd_val 
                                        & engine_payload_fifo_rd_rdy;

    frontend_tx_payload_engine #( 
         .SRC_X     (SRC_X                  )
        ,.SRC_Y     (SRC_Y                  )
        ,.TX_DRAM_X (TX_DRAM_X              )
        ,.TX_DRAM_Y (TX_DRAM_Y              )
        ,.FBITS     (TCP_TX_BUF_IF_FBITS    )
    ) tx_payload_engine (
         .clk   (clk)
        ,.rst   (rst)
    
        // I/O for the NoC
        ,.tx_payload_noc0_val           (mem_if_dtc_ctrl_noc1_val           )
        ,.tx_payload_noc0_data          (mem_if_dtc_ctrl_noc1_data          )
        ,.noc0_tx_payload_rdy           (dtc_mem_if_ctrl_noc1_rdy           )
                                                                
        ,.noc0_tx_payload_val           (payload_fifo_engine_rd_val         )
        ,.noc0_tx_payload_data          (payload_fifo_engine_rd_data        )
        ,.tx_payload_noc0_rdy           (engine_payload_fifo_rd_rdy         )
        
        // Read req
        ,.src_payload_tx_val            (send_dst_tx_val                    )
        ,.src_payload_tx_flowid         (send_dst_tx_flowid                 )
        ,.src_payload_tx_src_ip         (send_dst_tx_src_ip                 )
        ,.src_payload_tx_dst_ip         (send_dst_tx_dst_ip                 )
        ,.src_payload_tx_tcp_hdr        (send_dst_tx_tcp_hdr                )
        ,.src_payload_tx_payload_entry  (send_dst_tx_payload                )
        ,.payload_src_tx_rdy            (dst_send_tx_rdy                    )
     
        // Read resp
        ,.payload_dst_tx_hdr_val        (payload_chksum_tx_hdr_val          )
        ,.payload_dst_tx_src_ip         (payload_chksum_tx_src_ip           )
        ,.payload_dst_tx_dst_ip         (payload_chksum_tx_dst_ip           )
        ,.payload_dst_tx_payload_len    (payload_chksum_tx_payload_len      )
        ,.payload_dst_tx_tcp_hdr        (payload_chksum_tx_tcp_hdr          )
        ,.dst_payload_tx_hdr_rdy        (chksum_payload_tx_hdr_rdy          )
        
        ,.payload_dst_tx_data_val       (payload_fifo_wr_val                )
        ,.payload_dst_tx_data           (payload_fifo_wr_data.data          )
        ,.payload_dst_tx_data_last      (payload_fifo_wr_data.last          )
        ,.payload_dst_tx_data_padbytes  (payload_fifo_wr_data.padbytes      )
        ,.dst_payload_tx_data_rdy       (fifo_payload_wr_rdy                )
    );

    bsg_fifo_1r1w_small #( 
         .width_p   (FIFO_STRUCT_W  )
        ,.els_p     (4              )
        ,.harden_p  (1              )
    ) payload_chksum_fifo ( 
         .clk_i     (clk    )
        ,.reset_i   (rst    )
    
        ,.v_i       (payload_fifo_wr_val    )
        ,.data_i    (payload_fifo_wr_data   )
        ,.ready_o   (fifo_payload_wr_rdy    )
    
        ,.v_o       (fifo_chksum_rd_val     )
        ,.data_o    (fifo_chksum_rd_data    )
        ,.yumi_i    (chksum_fifo_rd_req     )
    );

    assign chksum_fifo_rd_req = fifo_chksum_rd_val & chksum_fifo_rd_rdy;
    
    frontend_tx_chksum_engine #(
        .DATA_WIDTH (`MAC_INTERFACE_W   )
    ) tcp_tx_chksum (
         .clk   (clk)
        ,.rst   (rst)

        // I/O from the payload engine
        ,.src_chksum_tx_hdr_val         (payload_chksum_tx_hdr_val      )
        ,.src_chksum_tx_src_ip          (payload_chksum_tx_src_ip       )
        ,.src_chksum_tx_dst_ip          (payload_chksum_tx_dst_ip       )
        ,.src_chksum_tx_payload_len     (payload_chksum_tx_payload_len  )
        ,.src_chksum_tx_tcp_hdr         (payload_chksum_tx_tcp_hdr      )
        ,.chksum_src_tx_hdr_rdy         (chksum_payload_tx_hdr_rdy      )

        ,.src_chksum_tx_data_val        (fifo_chksum_rd_val             )
        ,.src_chksum_tx_data            (fifo_chksum_rd_data.data       )
        ,.src_chksum_tx_data_last       (fifo_chksum_rd_data.last       )
        ,.src_chksum_tx_data_padbytes   (fifo_chksum_rd_data.padbytes   )
        ,.chksum_src_tx_data_rdy        (chksum_fifo_rd_rdy             )

        // I/O to the MAC side
        ,.chksum_dst_tx_hdr_val         (chksum_tcp_tx_out_hdr_val      )
        ,.chksum_dst_tx_src_ip          (chksum_tcp_tx_out_src_ip       )
        ,.chksum_dst_tx_dst_ip          (chksum_tcp_tx_out_dst_ip       )
        ,.chksum_dst_tx_tcp_len         (chksum_tcp_tx_out_tcp_len      )
        ,.dst_chksum_tx_hdr_rdy         (tcp_tx_out_chksum_hdr_rdy      )

        ,.chksum_dst_tx_data_val        (chksum_tcp_tx_out_data_val     )
        ,.chksum_dst_tx_data            (chksum_tcp_tx_out_data         )
        ,.chksum_dst_tx_data_last       (chksum_tcp_tx_out_last         )
        ,.chksum_dst_tx_data_padbytes   (chksum_tcp_tx_out_padbytes     )
        ,.dst_chksum_tx_data_rdy        (tcp_tx_out_chksum_data_rdy     )
    );


    to_ip_tx_noc_out #(
         .SRC_X (SRC_X          )
        ,.SRC_Y (SRC_Y          )
    ) tcp_tx_noc_out (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.to_ip_tx_out_noc0_val         (tcp_tx_out_merger_data_noc0_val    )
        ,.to_ip_tx_out_noc0_data        (tcp_tx_out_merger_data_noc0_data   )
        ,.noc0_to_ip_tx_out_rdy         (merger_tcp_tx_out_data_noc0_rdy    )
                                                                            
        ,.src_to_ip_tx_out_hdr_val      (chksum_tcp_tx_out_hdr_val          )
        ,.src_to_ip_tx_out_src_ip       (chksum_tcp_tx_out_src_ip           )
        ,.src_to_ip_tx_out_dst_ip       (chksum_tcp_tx_out_dst_ip           )
        ,.src_to_ip_tx_out_payload_len  (chksum_tcp_tx_out_tcp_len          )
        ,.src_to_ip_tx_out_protocol     (`IPPROTO_TCP                       )
        ,.src_to_ip_tx_out_dst_x        (IP_TX_TILE_X[`XY_WIDTH-1:0]        )
        ,.src_to_ip_tx_out_dst_y        (IP_TX_TILE_Y[`XY_WIDTH-1:0]        )
        ,.to_ip_tx_out_src_hdr_rdy      (tcp_tx_out_chksum_hdr_rdy          )

        ,.src_to_ip_tx_out_data_val     (chksum_tcp_tx_out_data_val         )
        ,.src_to_ip_tx_out_data         (chksum_tcp_tx_out_data             )
        ,.src_to_ip_tx_out_last         (chksum_tcp_tx_out_last             )
        ,.src_to_ip_tx_out_padbytes     (chksum_tcp_tx_out_padbytes         )
        ,.to_ip_tx_out_src_data_rdy     (tcp_tx_out_chksum_data_rdy         )
    );

    tcp_tx_app_if_wrap #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) tx_app_if (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.noc_tcp_tx_ptr_if_val             (ctd_ptr_if_ctrl_noc1_val       )
        ,.noc_tcp_tx_ptr_if_data            (ctd_ptr_if_ctrl_noc1_data      )
        ,.tcp_tx_ptr_if_noc_rdy             (ptr_if_ctd_ctrl_noc1_rdy       )

        ,.tcp_tx_ptr_if_noc_val             (ptr_if_dtc_ctrl_noc1_val       )
        ,.tcp_tx_ptr_if_noc_data            (ptr_if_dtc_ctrl_noc1_data      )
        ,.noc_tcp_tx_ptr_if_rdy             (dtc_ptr_if_ctrl_noc1_rdy       )
                                                                            
        ,.app_tail_ptr_tx_wr_req_val        (app_tail_ptr_tx_wr_req_val     )
        ,.app_tail_ptr_tx_wr_req_addr       (app_tail_ptr_tx_wr_req_flowid  )
        ,.app_tail_ptr_tx_wr_req_data       (app_tail_ptr_tx_wr_req_data    )
        ,.tail_ptr_app_tx_wr_req_rdy        (tail_ptr_app_tx_wr_req_rdy     )
                                                                            
        ,.app_tail_ptr_tx_rd_req_val        (app_tail_ptr_tx_rd_req_val     )
        ,.app_tail_ptr_tx_rd_req_addr       (app_tail_ptr_tx_rd_req_flowid  )
        ,.tail_ptr_app_tx_rd_req_rdy        (tail_ptr_app_tx_rd_req_rdy     )
                                                                            
        ,.tail_ptr_app_tx_rd_resp_val       (tail_ptr_app_tx_rd_resp_val    )
        ,.tail_ptr_app_tx_rd_resp_addr      (tail_ptr_app_tx_rd_resp_flowid )
        ,.tail_ptr_app_tx_rd_resp_data      (tail_ptr_app_tx_rd_resp_data   )
        ,.app_tail_ptr_tx_rd_resp_rdy       (app_tail_ptr_tx_rd_resp_rdy    )
                                                                            
        ,.app_head_ptr_tx_rd_req_val        (app_head_ptr_tx_rd_req_val     )
        ,.app_head_ptr_tx_rd_req_addr       (app_head_ptr_tx_rd_req_flowid  )
        ,.head_ptr_app_tx_rd_req_rdy        (head_ptr_app_tx_rd_req_rdy     )
                                                                            
        ,.head_ptr_app_tx_rd_resp_val       (head_ptr_app_tx_rd_resp_val    )
        ,.head_ptr_app_tx_rd_resp_addr      (head_ptr_app_tx_rd_resp_flowid )
        ,.head_ptr_app_tx_rd_resp_data      (head_ptr_app_tx_rd_resp_data   )
        ,.app_head_ptr_tx_rd_resp_rdy       (app_head_ptr_tx_rd_resp_rdy    )

        ,.app_sched_update_val              (app_sched_update_val           )
        ,.app_sched_update_cmd              (app_sched_update_cmd           )
        ,.sched_app_update_rdy              (sched_app_update_rdy           )
    );
endmodule
