`include "ip_rewrite_noc_pipe_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module ip_rewrite_rx_tile #(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
)(
     input clk
    ,input rst

<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="ip_rewrite_rx",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);
<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router",
    nocs=tile_config.nocs, noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>
    
    logic                           ctovr_rewrite_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ctovr_rewrite_data_noc0_data;
    logic                           rewrite_ctovr_data_noc0_rdy;
    
    logic                           rewrite_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   rewrite_vrtoc_data_noc0_data;
    logic                           vrtoc_rewrite_data_noc0_rdy;
    
    logic                           ctovr_rewrite_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] ctovr_rewrite_ctrl_noc1_data;
    logic                           rewrite_ctovr_ctrl_noc1_rdy;
    
    logic                           rewrite_vrtoc_ctrl_noc2_val;
    logic   [`CTRL_NOC2_DATA_W-1:0] rewrite_vrtoc_ctrl_noc2_data;
    logic                           vrtoc_rewrite_ctrl_noc2_rdy;

    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) ip_rewrite_rx_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="ip_rewrite_rx", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );

    assign vrtoc_router_ctrl_noc1_val = 1'b0;
    assign vrtoc_router_ctrl_noc1_data = '0;
    assign ctovr_router_ctrl_noc2_yummy = 1'b0;
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_data_noc0_data    )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val     )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy   )

        //val/rdy interface
        ,.ctovr_dst_data    (ctovr_rewrite_data_noc0_data   )
        ,.ctovr_dst_val     (ctovr_rewrite_data_noc0_val    )
        ,.dst_ctovr_rdy     (rewrite_ctovr_data_noc0_rdy    )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (rewrite_vrtoc_data_noc0_data   )
        ,.src_vrtoc_val     (rewrite_vrtoc_data_noc0_val    )
        ,.vrtoc_src_rdy     (vrtoc_rewrite_data_noc0_rdy    )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );

    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC1_DATA_W  )
    ) ctrl_noc1_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_ctrl_noc1_data    )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc1_val     )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc1_yummy   )

        //val/rdy interface
        ,.ctovr_dst_data    (ctovr_rewrite_ctrl_noc1_data   )
        ,.ctovr_dst_val     (ctovr_rewrite_ctrl_noc1_val    )
        ,.dst_ctovr_rdy     (rewrite_ctovr_ctrl_noc1_rdy    )
    );
    
    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC2_DATA_W  )
    ) ctrl_noc2_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (rewrite_vrtoc_ctrl_noc2_data   )
        ,.src_vrtoc_val     (rewrite_vrtoc_ctrl_noc2_val    )
        ,.vrtoc_src_rdy     (vrtoc_rewrite_ctrl_noc2_rdy    )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc2_data    )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc2_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc2_yummy   )
    );

    ip_rewrite_noc_rx #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
        ,.NOC1_DATA_W   (`CTRL_NOC1_DATA_W  )
        ,.NOC2_DATA_W   (`CTRL_NOC2_DATA_W  )
    ) rewrite_noc_rx (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.noc0_ctovr_ip_rewrite_in_val      (ctovr_rewrite_data_noc0_val    )
        ,.noc0_ctovr_ip_rewrite_in_data     (ctovr_rewrite_data_noc0_data   )
        ,.ip_rewrite_in_noc0_ctovr_rdy      (rewrite_ctovr_data_noc0_rdy    )
        
        ,.ip_rewrite_out_noc0_vrtoc_val     (rewrite_vrtoc_data_noc0_val    )
        ,.ip_rewrite_out_noc0_vrtoc_data    (rewrite_vrtoc_data_noc0_data   )
        ,.noc0_vrtoc_ip_rewrite_out_rdy     (vrtoc_rewrite_data_noc0_rdy    )
        
        ,.noc_lookup_ctrl_in_val            (ctovr_rewrite_ctrl_noc1_val    )
        ,.noc_lookup_ctrl_in_data           (ctovr_rewrite_ctrl_noc1_data   )
        ,.lookup_ctrl_in_noc_rdy            (rewrite_ctovr_ctrl_noc1_rdy    )
        
        ,.lookup_ctrl_out_noc_val           (rewrite_vrtoc_ctrl_noc2_val    )
        ,.lookup_ctrl_out_noc_data          (rewrite_vrtoc_ctrl_noc2_data   )
        ,.noc_lookup_ctrl_out_rdy           (vrtoc_rewrite_ctrl_noc2_rdy    )
    );

endmodule
