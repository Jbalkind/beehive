`include "ip_rewrite_noc_pipe_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module ip_rewrite_rx_tile 
import beehive_ip_rewrite_msg::*;
import tracker_pkg::*;
import stats_manager_pkg::*;
#(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
)(
     input clk
    ,input rst

<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="ip_rewrite_rx",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);
<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router",
    nocs=tile_config.nocs, noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>
    logic                           ctovr_log_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ctovr_log_data_noc0_data;
    logic                           log_ctovr_data_noc0_rdy;
    
    logic                           log_rewrite_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   log_rewrite_data_noc0_data;
    logic                           rewrite_log_data_noc0_rdy;     
    
    logic                           rewrite_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   rewrite_vrtoc_data_noc0_data;
    logic                           vrtoc_rewrite_data_noc0_rdy;
    
    logic                           in_rewrite_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  in_rewrite_ctrl_noc1_data;
    logic                           rewrite_in_ctrl_noc1_rdy;
    
    logic                           rewrite_out_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  rewrite_out_ctrl_noc1_data;
    logic                           out_rewrite_ctrl_noc1_rdy;
    
    logic                           ctovr_splitter_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  ctovr_splitter_ctrl_noc1_data;
    logic                           splitter_ctovr_ctrl_noc1_rdy;

    logic                           merger_vrtoc_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  merger_vrtoc_ctrl_noc1_data;
    logic                           vrtoc_merger_ctrl_noc1_rdy;
    
    logic                           in_request_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  in_request_noc1_data;
    logic                           request_in_noc1_rdy;

    logic                           request_out_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  request_out_noc1_data;
    logic                           out_request_noc1_rdy;

    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) ip_rewrite_rx_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="ip_rewrite_rx", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );

    assign ctovr_router_ctrl_noc2_yummy = 1'b0;
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_data_noc0_data    )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val     )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy   )

        //val/rdy interface
        ,.ctovr_dst_data    (ctovr_log_data_noc0_data       )
        ,.ctovr_dst_val     (ctovr_log_data_noc0_val        )
        ,.dst_ctovr_rdy     (log_ctovr_data_noc0_rdy        )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
`        ,.src_vrtoc_data    (rewrite_vrtoc_data_noc0_data   )
        ,.src_vrtoc_val     (rewrite_vrtoc_data_noc0_val    )
        ,.vrtoc_src_rdy     (vrtoc_rewrite_data_noc0_rdy    )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );

    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC_DATA_W  )
    ) ctrl_noc1_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_ctrl_noc1_data    )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc1_val     )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc1_yummy   )

        //val/rdy interface
        ,.ctovr_dst_data    (ctovr_splitter_ctrl_noc1_data  )
        ,.ctovr_dst_val     (ctovr_splitter_ctrl_noc1_val   )
        ,.dst_ctovr_rdy     (splitter_ctovr_ctrl_noc1_rdy   )
    );
    
    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC_DATA_W  )
    ) ctrl_noc1_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (merger_vrtoc_ctrl_noc1_data    )
        ,.src_vrtoc_val     (merger_vrtoc_ctrl_noc1_val     )
        ,.vrtoc_src_rdy     (vrtoc_merger_ctrl_noc1_rdy     )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc1_data    )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc1_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc1_yummy   )
    );
    
    // split NoC traffic for:
    // - editing the IP table
    // - receiving tracker read requests
    beehive_noc_fbits_splitter #(
         .NOC_DATA_W        (`CTRL_NOC_DATA_W       )
        ,.MSG_PAYLOAD_LEN   (`PAYLOAD_LEN           )
        ,.MSG_LEN_HI        (`CTRL_MSG_LENGTH_HI    )
        ,.MSG_LEN_LO        (`CTRL_MSG_LENGTH_LO    )
        ,.FBITS_HI          (`CTRL_MSG_DST_FBITS_HI )
        ,.FBITS_LO          (`CTRL_MSG_DST_FBITS_LO )
        ,.num_targets   (3'd2)
        ,.fbits_type0   (IP_REWRITE_TABLE_CTRL_FBITS    )
        ,.fbits_type1   (TRACKER_FBITS                  )
    ) splitter (
         .clk   (clk    )
        ,.rst_n (~rst   )

        ,.src_splitter_vr_noc_val   (ctovr_splitter_ctrl_noc1_val   )
        ,.src_splitter_vr_noc_dat   (ctovr_splitter_ctrl_noc1_data  )
        ,.splitter_src_vr_noc_rdy   (splitter_ctovr_ctrl_noc1_rdy   )

        ,.splitter_dst0_vr_noc_val  (in_rewrite_ctrl_noc1_val       )
        ,.splitter_dst0_vr_noc_dat  (in_rewrite_ctrl_noc1_data      )
        ,.dst0_splitter_vr_noc_rdy  (manager_in_noc0_rdy            )

        ,.splitter_dst1_vr_noc_val  (in_request_noc1_val            )
        ,.splitter_dst1_vr_noc_dat  (in_request_noc1_data           )
        ,.dst1_splitter_vr_noc_rdy  (request_in_noc1_rdy            )

        ,.splitter_dst2_vr_noc_val  ()
        ,.splitter_dst2_vr_noc_dat  ()
        ,.dst2_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst3_vr_noc_val  ()
        ,.splitter_dst3_vr_noc_dat  ()
        ,.dst3_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst4_vr_noc_val  ()
        ,.splitter_dst4_vr_noc_dat  ()
        ,.dst4_splitter_vr_noc_rdy  (1'b0)
    );
    
    // merge NoC traffic for:
    // - confirming configuration
    // - responding to tracker reads
    beehive_noc_prio_merger #(
         .NOC_DATA_W        (`CTRL_NOC_DATA_W       )
        ,.MSG_PAYLOAD_LEN   (`PAYLOAD_LEN           )
        ,.MSG_LEN_HI        (`CTRL_MSG_LENGTH_HI    )
        ,.MSG_LEN_LO        (`CTRL_MSG_LENGTH_LO    )
        ,.num_sources    (2)
    ) merger_noc1 (   
         .clk   (clk)
        ,.rst_n (~rst)
    
        ,.src0_merger_vr_noc_val    (rewrite_out_ctrl_noc1_val      )
        ,.src0_merger_vr_noc_dat    (rewrite_out_ctrl_noc1_data     )
        ,.merger_src0_vr_noc_rdy    (out_rewrite_ctrl_noc1_rdy      )
    
        ,.src1_merger_vr_noc_val    (request_out_noc1_val           )
        ,.src1_merger_vr_noc_dat    (request_out_noc1_data          )
        ,.merger_src1_vr_noc_rdy    (out_request_noc1_rdy           )
    
        ,.src2_merger_vr_noc_val    ()
        ,.src2_merger_vr_noc_dat    ()
        ,.merger_src2_vr_noc_rdy    ()
    
        ,.src3_merger_vr_noc_val    ('0)
        ,.src3_merger_vr_noc_dat    ('0)
        ,.merger_src3_vr_noc_rdy    ()
    
        ,.src4_merger_vr_noc_val    ('0)
        ,.src4_merger_vr_noc_dat    ('0)
        ,.merger_src4_vr_noc_rdy    ()
    
        ,.merger_dst_vr_noc_val     (merger_vrtoc_ctrl_noc1_val     )
        ,.merger_dst_vr_noc_dat     (merger_vrtoc_ctrl_noc1_data    )
        ,.dst_merger_vr_noc_rdy     (vrtoc_merger_ctrl_noc1_rdy     )
    );

    tracker_top #(
         .SRC_X                 (SRC_X              )
        ,.SRC_Y                 (SRC_Y              )
        ,.TRACKER_DEPTH_LOG2    (TRACKER_ADDR_W     )
        ,.DATA_NOC_W            (`NOC_DATA_WIDTH    )
        ,.REQ_NOC_W             (`CTRL_NOC_DATA_W   )
        ,.RESP_NOC_W            (`CTRL_NOC_DATA_W   )
    ) tracker (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.ctovr_rd_tracker_in_val   (in_request_noc1_val        )
        ,.ctovr_rd_tracker_in_data  (in_request_noc1_data       )
        ,.rd_tracker_in_ctovr_rdy   (request_in_noc1_rdy        )
                                                                
        ,.rd_tracker_out_vrtoc_val  (request_out_noc1_val       )
        ,.rd_tracker_out_vrtoc_data (request_out_noc1_data      )
        ,.vrtoc_rd_tracker_out_rdy  (out_request_noc1_rdy       )
    
        ,.noc_wr_tracker_in_val     (ctovr_log_data_noc0_val    )
        ,.noc_wr_tracker_in_data    (ctovr_log_data_noc0_data   )
        ,.wr_tracker_noc_in_rdy     (log_ctovr_data_noc0_rdy    )
        
        ,.wr_tracker_noc_out_val    (log_rewrite_data_noc0_val  )
        ,.wr_tracker_noc_out_data   (log_rewrite_data_noc0_data )
        ,.noc_wr_tracker_out_rdy    (rewrite_log_data_noc0_rdy  )
    );

    ip_rewrite_noc_rx #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
        ,.NOC1_DATA_W   (`CTRL_NOC1_DATA_W  )
        ,.NOC2_DATA_W   (`CTRL_NOC2_DATA_W  )
    ) rewrite_noc_rx (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.noc0_ctovr_ip_rewrite_in_val      (log_rewrite_data_noc0_val      )
        ,.noc0_ctovr_ip_rewrite_in_data     (log_rewrite_data_noc0_data     )
        ,.ip_rewrite_in_noc0_ctovr_rdy      (rewrite_log_data_noc0_rdy      )
        
        ,.ip_rewrite_out_noc0_vrtoc_val     (rewrite_vrtoc_data_noc0_val    )
        ,.ip_rewrite_out_noc0_vrtoc_data    (rewrite_vrtoc_data_noc0_data   )
        ,.noc0_vrtoc_ip_rewrite_out_rdy     (vrtoc_rewrite_data_noc0_rdy    )
        
        ,.noc_lookup_ctrl_in_val            (in_rewrite_ctrl_noc1_val       )
        ,.noc_lookup_ctrl_in_data           (in_rewrite_ctrl_noc1_data      )
        ,.lookup_ctrl_in_noc_rdy            (rewrite_in_ctrl_noc1_rdy       )
        
        ,.lookup_ctrl_out_noc_val           (rewrite_out_ctrl_noc1_val      )
        ,.lookup_ctrl_out_noc_data          (rewrite_out_ctrl_noc1_data     )
        ,.noc_lookup_ctrl_out_rdy           (out_rewrite_ctrl_noc1_rdy      )
    );

endmodule
