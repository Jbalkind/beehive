`include "soc_defs.vh"
`include "packet_defs.vh"
`include "noc_defs.vh"

import beehive_topology::*;
module rs_encode_udp_top (
     input clk
    ,input rst
    
    ,input                                      mac_engine_rx_val
    ,input          [`MAC_INTERFACE_W-1:0]      mac_engine_rx_data
    ,input                                      mac_engine_rx_startframe
    ,input          [`MTU_SIZE_W-1:0]           mac_engine_rx_frame_size
    ,input                                      mac_engine_rx_endframe
    ,input          [`MAC_PADBYTES_W-1:0]       mac_engine_rx_padbytes
    ,output logic                               engine_mac_rx_rdy
    
    ,output logic                               engine_mac_tx_val
    ,input                                      mac_engine_tx_rdy
    ,output logic                               engine_mac_tx_startframe
    ,output logic   [`MTU_SIZE_W-1:0]           engine_mac_tx_frame_size 
    ,output logic                               engine_mac_tx_endframe
    ,output logic   [`MAC_INTERFACE_W-1:0]      engine_mac_tx_data
    ,output logic   [`MAC_PADBYTES_W-1:0]       engine_mac_tx_padbytes
);

<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from tile_generator import TileDirs
import logging
logging.basicConfig(level=logging.INFO)

design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
%>

// main tile connection wires
<%
# generate wires for hooking the tiles together
tile_config.printWires()
%>

// tiles

    eth_rx_tile #(
         .SRC_X (ETH_RX_TILE_X  )
        ,.SRC_Y (ETH_RX_TILE_Y  )
    ) eth_rx_0_0 (
         .clk   (clk)
        ,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("eth_rx_tile")
print(tile_std_ports)
%>
		,.mac_engine_rx_val         (mac_engine_rx_val          )
		,.mac_engine_rx_data        (mac_engine_rx_data         )
		,.mac_engine_rx_startframe  (mac_engine_rx_startframe   )
		,.mac_engine_rx_frame_size  (mac_engine_rx_frame_size   )
		,.mac_engine_rx_endframe    (mac_engine_rx_endframe     )
		,.mac_engine_rx_padbytes    (mac_engine_rx_padbytes     )
		,.engine_mac_rx_rdy         (engine_mac_rx_rdy          )
    );

	eth_tx_tile #(
	     .SRC_X (ETH_TX_TILE_X  )
	    ,.SRC_Y (ETH_TX_TILE_Y  )
	) eth_tx_0_1 (
		 .clk   (clk)
		,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("eth_tx_tile")
print(tile_std_ports)
%>
		,.engine_mac_tx_val         (engine_mac_tx_val          )
		,.mac_engine_tx_rdy         (mac_engine_tx_rdy          )
		,.engine_mac_tx_startframe  (engine_mac_tx_startframe   )
		,.engine_mac_tx_frame_size  (engine_mac_tx_frame_size   )
		,.engine_mac_tx_endframe    (engine_mac_tx_endframe     )
		,.engine_mac_tx_data        (engine_mac_tx_data         )
		,.engine_mac_tx_padbytes    (engine_mac_tx_padbytes     )
	);

    ip_rx_tile #(
	     .SRC_X (IP_RX_TILE_X  )
	    ,.SRC_Y (IP_RX_TILE_Y  )
	) IP_RX_1_0 (
		 .clk   (clk)
		,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("ip_rx_tile")
print(tile_std_ports)
%>
	);

    ip_tx_tile #(
	     .SRC_X (IP_TX_TILE_X  )
	    ,.SRC_Y (IP_TX_TILE_Y  )
	) IP_TX_1_1 (
		 .clk   (clk)
		,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("ip_tx_tile")
print(tile_std_ports)
%>
	);

    udp_rx_tile #(
	     .SRC_X (UDP_RX_TILE_X  )
	    ,.SRC_Y (UDP_RX_TILE_Y  )
	) UDP_RX_2_0 (
		 .clk   (clk)
		,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("udp_rx_tile")
print(tile_std_ports)
%>
	);

    udp_tx_tile #(
	     .SRC_X (UDP_TX_TILE_X  )
	    ,.SRC_Y (UDP_TX_TILE_Y  )
	) UDP_TX_2_1 (
		 .clk   (clk)
		,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("udp_tx_tile")
print(tile_std_ports)
%>
	);

    rs_encode_rx_scheduler_tile #(
	     .SRC_X (RS_ENCODE_RX_SCHEDULER_TILE_X  )
	    ,.SRC_Y (RS_ENCODE_RX_SCHEDULER_TILE_Y  )
        ,.NUM_DSTS  (4  )
<%
end_x, end_y = tile_config.getEndpointCoords("rs_encode_rx_scheduler_tile")
print(f"    ) rs_encode_rx_scheduler_{end_x}_{end_y} (")
%>
		 .clk   (clk)
		,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("rs_encode_rx_scheduler_tile")
print(tile_std_ports)
%>
    );

    rs_encode_udp_tile #(
	     .SRC_X (RS_ENCODE_UDP_TILE0_X  )
	    ,.SRC_Y (RS_ENCODE_UDP_TILE0_Y  )
<%
end_x, end_y = tile_config.getEndpointCoords("rs_encode_udp_tile0")
print(f"    ) rs_encode_udp_{end_x}_{end_y} (")
%>
		 .clk   (clk)
		,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("rs_encode_udp_tile0")
print(tile_std_ports)
%>
	);
    
    rs_encode_udp_tile #(
	     .SRC_X (RS_ENCODE_UDP_TILE1_X  )
	    ,.SRC_Y (RS_ENCODE_UDP_TILE1_Y  )
<%
end_x, end_y = tile_config.getEndpointCoords("rs_encode_udp_tile1")
print(f"    ) rs_encode_udp_{end_x}_{end_y} (")
%>
		 .clk   (clk)
		,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("rs_encode_udp_tile1")
print(tile_std_ports)
%>
	);
    
    rs_encode_udp_tile #(
	     .SRC_X (RS_ENCODE_UDP_TILE2_X  )
	    ,.SRC_Y (RS_ENCODE_UDP_TILE2_Y  )
<%
end_x, end_y = tile_config.getEndpointCoords("rs_encode_udp_tile2")
print(f"    ) rs_encode_udp_{end_x}_{end_y} (")
%>
		 .clk   (clk)
		,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("rs_encode_udp_tile2")
print(tile_std_ports)
%>
	);
    
    rs_encode_udp_tile #(
	     .SRC_X (RS_ENCODE_UDP_TILE3_X  )
	    ,.SRC_Y (RS_ENCODE_UDP_TILE3_Y  )
<%
end_x, end_y = tile_config.getEndpointCoords("rs_encode_udp_tile3")
print(f"    ) rs_encode_udp_{end_x}_{end_y} (")
%>
		 .clk   (clk)
		,.rst   (rst)
<%
tile_std_ports = tile_config.getEndpointPorts("rs_encode_udp_tile3")
print(tile_std_ports)
%>
	);

<%
empty_tiles = tile_config.getEmptyTiles()
print(empty_tiles)
%>

endmodule
